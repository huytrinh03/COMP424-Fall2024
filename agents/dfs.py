from agents.agent import Agent
from store import register_agent
import sys
import numpy as np
from copy import deepcopy
import time
from helpers import random_move, count_capture, execute_move, check_endgame, get_valid_moves
from student_agent import heuristics

class ReversiNode:
  """
  A class to represent a node in the Reversi game tree.
  """

  def __init__(self, board, player, move=None):
    self.board = board  # The state of the game board
    self.player = player  # The current player (1 or 2)
    self.move = move  # The move that led to this state
    self.children = []  # List of child nodes

  def __str__(self):
    return f"Player: {self.player}, Move: {self.move}, Board: {np.array2string(self.board)}"

  def dfs(self, max_depth, depth=0):
    """
    Perform DFS to explore the game tree.
    """
    if depth == max_depth:
      return # Stop expanding at maximum depth

    moves = get_valid_moves(self.board, self.player)
    for move in moves:
      next_player = 1 if self.player == 2 else 2  # Switch player
      simulated_board = deepcopy(self.board)
      execute_move(simulated_board, move, self.player)
      child_node = ReversiNode(simulated_board, next_player)
      self.children.append(child_node)
      child_node.dfs(max_depth, depth + 1)

  def print_tree(self, depth=0):
    """
    Recursively print the tree for visualization.
    """
    indent = "  " * depth
    print(f"{indent}{self}")
    for child in self.children:
      child.print_tree(depth + 1)

  # Generated by chatGPT accoding to the following prompt:
  # "Write a program that does alpha-beta pruning in Python"
  def alpha_beta_pruning(self, alpha, beta, maximizing_player):
    """
    Perform alpha-beta pruning.

    Args:
    - node (list or int): The current node value (int) or a list of child nodes.
    - depth (int): The current depth in the tree.
    - alpha (float): The alpha value (best score for maximizing player so far).
    - beta (float): The beta value (best score for minimizing player so far).
    - maximizing_player (bool): True if the current layer is maximizing; False otherwise.

    Returns:
    - int: The best score for the current player.
    """

    # If leaf node, evaluate the node
    if len(self.children) == 0:
      return [heuristics(self.board, self.player), self.move]  # Replace with an evaluation function if needed

    best_move = None
    if maximizing_player:
      #max_eval = -1000000000
      for child in self.children:
        print("Max's turn:{}".format({child.__str__()}, child.alpha_beta_pruning(alpha, beta, False)))  # Debug
        eval = child.alpha_beta_pruning(alpha, beta, False)[0]
        #max_eval = max(max_eval, eval)
        #alpha = max(alpha, eval)
        if eval > alpha:
          alpha = eval
          best_move = child.move
        if alpha >= beta:
          break  # Beta cut-off
      # return max_eval
      return [alpha, best_move]

    else:
      #min_eval = 1000000000
      for child in self.children:
        print("Min's turn:{}{}".format({child.__str__()}, child.alpha_beta_pruning(alpha, beta, True)))  # Debug
        eval = child.alpha_beta_pruning(alpha, beta, True)[0]
        #min_eval = min(min_eval, eval)
        #beta = min(beta, eval)
        if eval < beta:
          beta = eval
          best_move = child.move
        if alpha >= beta:
          break  # Alpha cut-off
      #return min_eval
          return [beta, best_move]

def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press âŒ˜F8 to toggle the breakpoint.


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    board_size = 6
    chess_board = np.zeros((board_size, board_size), dtype=int)
    mid = board_size // 2
    chess_board[mid - 1][mid - 1] = 2  # White
    chess_board[mid - 1][mid] = 1  # Black
    chess_board[mid][mid - 1] = 1  # Black
    chess_board[mid][mid] = 2  # White

    tree_root = ReversiNode(chess_board, 1, None)
    tree_root.dfs(5)
    best_move = tree_root.alpha_beta_pruning(-1000000000, 1000000000, True)[1]

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
